{"version":3,"sources":["utils/duration/index.js","session/Session.js","focus-setting/FocusSetting.js","break-setting/BreakSetting.js","stop/StopBtn.js","play-pause/PlayPauseBtn.js","utils/class-names/index.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Session","session","focusDuration","breakDuration","duration","label","ariaValue","timeRemaining","className","data-testid","givenSeconds","seconds","round","secondsToDuration","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","FocusSetting","setFocusDuration","focusTimeControl","span","min","max","type","onClick","disabled","BreakSetting","setBreakDuration","breakTimeControl","StopBtn","setSession","setIsTimerRunning","title","PlayPauseBtn","classNameToBoolean","isTimerRunning","prevState","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","nextTick","Pomodoro","useState","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","aria-label","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d84b40c6.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\nimport { minutesToDuration , secondsToDuration} from \"../utils/duration/index\"\r\n\r\nconst Session = ({ session, focusDuration, breakDuration }) => {\r\n  // check if the session is active\r\n    if(!session) return null;\r\n\r\n  // set the duration\r\n    let duration = \"\";\r\n    if(session.label === \"Focusing\"){\r\n        duration =focusDuration;\r\n    }else{\r\n        duration = breakDuration;\r\n    };\r\n\r\n\r\n    // aria rate value\r\n    const ariaValue = (1-session.timeRemaining/(duration*60))*100;\r\n\r\n\r\n    return (\r\n        <div>\r\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              {session.label} for {minutesToDuration(duration)} minutes\r\n            </h2>\r\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(session.timeRemaining)} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={ariaValue} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${ariaValue}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Session;","import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration/index\"\r\n\r\n\r\n\r\nconst FocusSetting = ({ session, focusDuration, setFocusDuration}) => {\r\n    // Control and limit the focus time\r\n    const focusTimeControl = (span) => setFocusDuration(() => Math.min(Math.max(focusDuration+span,5),60));\r\n    return (\r\n      <div className=\"col\">\r\n        <div className=\"input-group input-group-lg mb-2\">\r\n          <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n            {/* TODO: Update this text to display the current focus session duration */}\r\n            Focus Duration: {minutesToDuration(focusDuration)}\r\n          </span>\r\n          <div className=\"input-group-append\">\r\n            {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"decrease-focus\"\r\n              onClick={() => focusTimeControl(-5)}\r\n              disabled={session}\r\n            >\r\n              <span className=\"oi oi-minus\" />\r\n            </button>\r\n            {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"increase-focus\"\r\n              onClick={() => focusTimeControl(5)}\r\n              disabled={session}\r\n            >\r\n              <span className=\"oi oi-plus\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default FocusSetting;","import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration/index\"\r\n\r\n\r\n\r\nconst BreakSetting = ({ session, breakDuration, setBreakDuration}) => {\r\n    //Control and limit the break time\r\n    const breakTimeControl = (span) => setBreakDuration(() =>  Math.min(Math.max(breakDuration+span,1),15));\r\n    return (\r\n      <div className=\"col\">\r\n        <div className=\"float-right\">\r\n          <div className=\"input-group input-group-lg mb-2\">\r\n            <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n              {/* TODO: Update this text to display the current break session duration */}\r\n              Break Duration: {minutesToDuration(breakDuration)}\r\n            </span>\r\n            <div className=\"input-group-append\">\r\n              {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"decrease-break\"\r\n                onClick={() => breakTimeControl(-1)}\r\n                disabled={session}\r\n              >\r\n                <span className=\"oi oi-minus\" />\r\n              </button>\r\n              {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"increase-break\"\r\n                onClick={() => breakTimeControl(1)}\r\n                disabled={session}\r\n              >\r\n                <span className=\"oi oi-plus\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default BreakSetting;","import React from \"react\";\r\n\r\n\r\nconst StopBtn = ({ session, setSession, setIsTimerRunning }) => {\r\n  // Reset the timer when stopped\r\n  const stopSessionHandler = () => {\r\n    setSession(null);\r\n    setIsTimerRunning(false);\r\n  };\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-secondary\"\r\n      data-testid=\"stop\"\r\n      title=\"Stop the session\"\r\n      onClick={stopSessionHandler}\r\n      disabled={!session}\r\n    >\r\n      <span className=\"oi oi-media-stop\" />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default StopBtn;","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\n\r\nconst PlayPauseBtn = ({ setSession, focusDuration, isTimerRunning, setIsTimerRunning }) => {\r\n    \r\n        /**\r\n     * Called whenever the play/pause button is clicked.\r\n     */\r\n    function playPause() {\r\n        setIsTimerRunning((prevState) => {\r\n        const nextState = !prevState;\r\n        if (nextState) {\r\n            setSession((prevStateSession) => {\r\n            // If the timer is starting and the previous session is null,\r\n            // start a focusing session.\r\n            if (prevStateSession === null) {\r\n                return {\r\n                label: \"Focusing\",\r\n                timeRemaining: focusDuration * 60,\r\n                };\r\n            }\r\n            return prevStateSession;\r\n            });\r\n        }\r\n        return nextState;\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-primary\"\r\n        data-testid=\"play-pause\"\r\n        title=\"Start or pause timer\"\r\n        onClick={playPause}\r\n      >\r\n        <span\r\n          className={classNames({\r\n            oi: true,\r\n            \"oi-media-play\": !isTimerRunning,\r\n            \"oi-media-pause\": isTimerRunning,\r\n          })}\r\n        />\r\n      </button>\r\n    );\r\n};\r\n\r\nexport default PlayPauseBtn;\r\n\r\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Session from \"../session/Session\";\nimport FocusSetting from \"../focus-setting/FocusSetting\"\nimport BreakSetting from \"../break-setting/BreakSetting\";\nimport StopBtn from \"../stop/StopBtn\";\nimport PlayPauseBtn from \"../play-pause/PlayPauseBtn\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  //Define state hooks for focus and break\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusSetting\n          session={session}\n          focusDuration={focusDuration}\n          setFocusDuration={setFocusDuration}\n        />\n\n        <BreakSetting\n          session={session}\n          breakDuration={breakDuration}\n          setBreakDuration={setBreakDuration}\n        />\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <PlayPauseBtn\n              setSession={setSession}\n              focusDuration={focusDuration}\n              isTimerRunning={isTimerRunning}\n              setIsTimerRunning={setIsTimerRunning}\n            />\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <StopBtn\n              session={session}\n              setSession={setSession}\n              setIsTimerRunning={setIsTimerRunning}\n            />\n          </div>\n        </div>\n      </div>\n      <Session\n        session={session}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}